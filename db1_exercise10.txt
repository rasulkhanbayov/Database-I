*******************************************************************************************
Compulsory exercise for practice 11
Create a table in both databases (ullman, aramis) with 2 columns whose name is PRACTICE11 and it 
contains the name (Ename) and salary (Sal) of those employees who are subordinates of JONES
(whose manager is JONES, whose manager's manager is JONES etc.) and the hiredate of the subordinate
was later than the hiredate of JONES.

You can check whether you completed the compulsory exercises with the following SQL query:

SELECT object_name "TABLE", created FROM user_objects 
WHERE object_type='TABLE' AND object_name LIKE 'PRACTICE%'
ORDER BY object_name;
*******************************************************************************************

Recursion in SQL queries
------------------------

/* DATALOG-like
Take the relation FLIGHT and give a recursive query for the following:
Give all the possible routes from Orig city to Dest city with the total cost of the route.
  FLIGHT(airline VARCHAR2(10), orig VARCHAR2(15), dest VARCHAR2(15), cost NUMBER);
Help:
Use a temporal relation Reaches(x,y,c,r) which gives the pair of cities (x,y) for which
it is possible to get from city x to city y by taking one or more flights, and c is the total
cost of that flight, r is the route (concatenated string).
First specify the Datalog rules for Reaches(orig,dest,cost,route) then rewrite it into an SQL recursive query,
then write a procedure where p_orig and p_dest are parameters.
*/
CREATE OR REPLACE PROCEDURE route_costs(p_orig VARCHAR, p_dest VARCHAR) IS
Test: 
set serveroutput on
execute route_costs('San Francisco','New York'); 
-----------------------------------------------------
/* CONNECT BY
Write a procedure which prints out (based on table NIKOVITS.PARENTOF) the names 
of people who has a richer descendant than him/her. 
(That is, at least one descendant has more money than the person.)
*/
CREATE OR REPLACE PROCEDURE rich_descendant IS
Test: 
set serveroutput on
execute rich_descendant(); 
-----------------------------------------------------
/*
Write a procedure which prints out (based on table NIKOVITS.PARENTOF) the name,
money and average money of the descendants for whom it is true, that the average money
of the descendants is greater than the person's money.
The program should print out 3 pieces of data for every row: Name, Money, Avg_Money_of_Descendants 
*/
CREATE OR REPLACE PROCEDURE rich_avg_descendant IS
Test: 
set serveroutput on
execute rich_avg_descendant();
-----------------------------------------------------
/*
Write a procedure which prints out (based on table NIKOVITS.FLIGHT) the nodes (cities)
of the directed cycles, which start and end with the parameter city.
Example output: Dallas-Chicago-Denver-Dallas
*/
CREATE OR REPLACE PROCEDURE find_cycle(p_node VARCHAR2) IS
Test:
set serveroutput on
execute find_cycle('Denver');
-----------------------------------------------------
/*
Write a procedure which prints out (based on table NIKOVITS.PARENTOF) the name and city
of people who have at least two ancestors with the same city as the person's city.
*/
CREATE OR REPLACE PROCEDURE ancestor2 IS
Test:
set serveroutput on
execute ancestor2();
-----------------------------------------------------
