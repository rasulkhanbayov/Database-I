Databases 1, practice retake 
============================

Anyone can improve his/her final practical grade with some of the exercises below.
******************************************
But you can improve at most by 1 grade !!!
******************************************

If you want to reach (with improvement) grade 2 or grade 3 you should complete 4 exercises,
2 from the first part and 2 from the second part.

If you want to reach grade 4, you should complete 5 exercises, 3 or 4 from the second part,
and 1 or 2 from the first part.

If you want to reach grade 5, you should complete 6 exercises, 4 or 5 from the second part
and 1 or 2 from the first part.


Part I. SQL exercises
=====================
Exercise 1
----------
Give the employees who have at least two subordinates who started to work on dates that have the 
same name (e.g. Monday, so the name of the days should be the same for the 2 subordinates.)
For these employees give the name of the employee (that is the name of the manager), the name of the day,
and the number of subordinates starting to work on this day. 
(ename, day_name, count_of_emp)

Exercise 2
----------
Give the lower and higher boundaries (lowest_sal, highest_sal) of the salary categories
for which it is true that all the employees falling into this category have the same job.
(lowest_sal, highest_sal)

Exercise 3
----------
Give the following result for which you can use the WITH statement. 
Give the employees for whom it is true that his salary is less than the average salary of the employees
falling in the same salary category as his salary category. 
In the result give the employee name, his salary, and the average salary of his salary category.
(ename, sal, category_avg)


Part II. PL/SQL exercises
=========================
You should make the following PL/SQL procedures/functions.
The names and parameters (signature) of the subprograms should be exactly the same as you see below!!!

Send the source code and the OUTPUT (!) of the program in a text file to the following email address: 
   nikovits@inf.elte.hu  
If you don't send output I will not evaluate your program.
You can find at each exercise how you should test your program.
You can use ARAMIS or ULLMAN database.


exercise 1
----------
Write a function which returns the lowest common multiple of two integers.
CREATE OR REPLACE FUNCTION lcm(p1 integer, p2 integer) RETURN number IS
Test: 
SELECT lcm(33462, 18876) FROM dual;


exercise 2 (Create your own table from NIKOVITS.EMP before running.)
----------
Write a procedure which increases the salary of the employees who has salary category p (p is parameter).
The increment should be the minimal salary of the employee's own department.
After executing the update statement, the procedure should print out the average salary of all employees.
At the very end (after printing out the average) the procedure should give a ROLLBACK statement
to save the original content of the table, in order to be able to run it several times.
CREATE OR REPLACE PROCEDURE upd_cat(p integer) IS
...
set serveroutput on
execute upd_cat(2);


Exercise 3 
----------
Write a function which gets a date parameter in one of the following formats: 
'yyyy.mm.dd', 'dd.mm.yyyy' or 'mm.yyyy.dd'. The function should return the name of the 
day, e.g. 'Tuesday'. If the parameter doesn't match any of the formats, the function
should return 'wrong format'.
CREATE OR REPLACE FUNCTION day_name(d varchar2) RETURN varchar2 IS
...
SELECT day_name('2018.05.01'), day_name('02.05.2018'), day_name('02.1967.03'), day_name('2018.13.13') FROM dual;


Exercise 4 
----------
Write a procedure which takes the first n (n is the parameter) prime numbers and puts them into 
an associative array. The first prime is 2, the second is 3 ... etc. 
The procedure should print out the last prime and the total sum of the primes.
CREATE OR REPLACE PROCEDURE primes(n integer) IS
...
set serveroutput on
execute primes(100);


Exercise 5 
----------
Write a procedure which prints out (based on table NIKOVITS.PARENTOF) the name and city
of people who have at least two ancestors with the same city as the person's city.
CREATE OR REPLACE PROCEDURE ancestor2 IS
...
set serveroutput on
execute ancestor2();
