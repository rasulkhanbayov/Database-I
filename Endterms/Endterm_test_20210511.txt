Databases 1, 2nd test 2021.05.11. 14.15
=============================================

You should make the following PL/SQL procedures/functions.
The names and parameters (signature) of the subprograms should be exactly the same as you see below!!!

Making 2 exercises is enough for grade 2
Making 3 exercises is enough for grade 3
Making 4 exercises is enough for grade 4
Making 5 exercises is enough for grade 5

Send the source code and the OUTPUT (!) of the program in a text file to the following email address: 
   nikovits@inf.elte.hu  
You can find at each exercise how you should test (run) your program.
If you don't send output of the test I will not evaluate your program!
You can use ARAMIS or ULLMAN database.

exercise 1
----------
Write a function which takes a positive integer as its parameter and returns the
prime factors of the parameter in a character string. The form of the string should be
the following: p1*p2*p3 ..., e.g. for 120 -> 2*2*2*3*5.
CREATE OR REPLACE FUNCTION primefactor(p1 integer) RETURN varchar2 IS
Test:
SELECT primefactor(86632) FROM dual;


exercise 2 (Create your own table from NIKOVITS.EMP before running.)
----------
Write a procedure which increases the salary of the employees who has salary category p (p is parameter).
The increment should be the commission of the employee, or if it is NULL, then the increment is 100.
After executing the update statement, the procedure should print out the average salary of all employees.
At the very end (after printing out the average) the procedure should give a ROLLBACK statement
to save the original content of the table, in order to be able to run it several times.
CREATE OR REPLACE PROCEDURE add_commission(p integer) IS
Test:
set serveroutput on
execute add_commission(4);


exercise 3
----------
Write a procedure which prints out the names of the employees whose name has two identical
letters (e.g. TURNER has two 'R'-s). The procedure should print out the names of these 
employees and the sum of their salaries.
CREATE OR REPLACE PROCEDURE letter2 IS 
Test:
set serveroutput on
execute letter2();


exercise 4 (Create your own table from NIKOVITS.EMP before running.)
----------
Write a procedure which updates the salaries on a department (parameter: department number).
The update should increase the salary in the following way: if the name of the employee contains
a letter 'T' then the increment is 10000. If the name doesn't contain 'T' then the increment
is n*10000, where n is the salary category of the employee.
The procedure should print out the name and new salary of the modified employees.
At the very end (after printing out the output) the procedure should give a ROLLBACK statement
to save the original content of the table, in order to be able to run it several times.
CREATE OR REPLACE PROCEDURE sal_increase(p_deptno INTEGER) IS 
Test:
set serveroutput on
execute sal_increase(20);


Exercise 5
----------
Write a function which returns the sum of the numbers in its string parameter.
The numbers are separated with a '+'. If any expression between the '+' characters
is not a number, the function should consider this expression as 0.
CREATE OR REPLACE FUNCTION sum_of2(p_char VARCHAR2) RETURN number IS
Test:
SELECT sum_of2('1+21 + bubu + + 2 ++') FROM dual;


Exercise 6
----------
Write a procedure which prints out (based on table NIKOVITS.PARENTOF) the name,
money and average money of the descendants for whom it is true, that the average money
of the descendants is greater than the person's money.
The program should print out 3 pieces of data for every row: Name, Money, Avg_Money_of_Descendants 
CREATE OR REPLACE PROCEDURE rich_avg_descendant IS
Test:
set serveroutput on
execute rich_avg_descendant();

******************************************************************************************
Comments:

Please note that a person is not the descendant of himself.

XXX
  YYY
    ZZZ
  QQQ
    PPP
      RRR

In the example above all the names are descendants of XXX, but XXX is not.

