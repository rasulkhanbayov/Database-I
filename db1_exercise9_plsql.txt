*******************************************************************************************
Compulsory exercise for practice 10
Create a table in both databases (ullman, aramis) with 3 columns whose name is PRACTICE10 and it 
contains the name (Ename), the hiredate and the day name of the hiredate (e.g. 'Tuesday') of those 
employees whose salary is greater than the average salary. 
Hint: you can use DAY_NAME() function if you wrote it before. (See it below among the exercises.)

You can check whether you completed the compulsory exercises with the following SQL query:

SELECT object_name "TABLE", created FROM user_objects 
WHERE object_type='TABLE' AND object_name LIKE 'PRACTICE%'
ORDER BY object_name;
*******************************************************************************************

The names and parameters (signature) of the subprograms should be exactly the same as you see below!!!
======================================================================================================

/*  A more complicated update
Write a procedure which updates the salaries of some employees in the following way:
Take the employee on each department whose hiredate was the oldest. Increase the 
salary of these employees by n*100 where n is the number of other employees on that department
(besides the firstly hired employee).
After executing the updates, the procedure should print out the new average salary rounded to 2 decimals.
At the very end the procedure should execute a ROLLBACK stetement, so you can run it several times
on the original data.
*/
CREATE OR REPLACE PROCEDURE sal_mod IS 
...
set serveroutput on
execute sal_mod();
----------------------------------------------------------------
/* Update with a cursor
Write a procedure which updates the salaries on a department (parameter: department number).
The update should increase the salary with n*10000, where n is the number of vowels (A,E,I,O,U)
in the name of the employee. (For ALLEN it is 2, for KING it is 1.)
The procedure should print out the name and new salary of the modified employees.
At the very end the procedure should execute a ROLLBACK stetement, so you can run it several times
on the original data.
*/
CREATE OR REPLACE PROCEDURE curs_upd(p_deptno INTEGER) IS 
...
set serveroutput on
execute curs_upd(10);
----------------------------------------------------------------
/* (exception)
Write a function which gets a date parameter in one of the following formats: 
'yyyy.mm.dd' or 'dd.mm.yyyy'. The function should return the name of the 
day, e.g. 'Tuesday'. If the parameter doesn't match any format, the function
should return 'wrong format'.
*/
CREATE OR REPLACE FUNCTION day_name(d varchar2) RETURN varchar2 IS
...
SELECT day_name('2017.05.01'), day_name('02.05.2017'), day_name('abc') FROM dual;

Hint: Try to convert the string to date and handle the exception if the conversion fails.
----------------------------------------------------------------
/* (exception, SQLCODE)
Write a procedure which gets a number parameter and prints out the reciprocal,
the sqare root and the factorial of the parameter in different lines. 
If any of these outputs is not defined or causes an overflow, the procedure should 
print out 'not defined' or the error code (SQLCODE) for this part.
(The factorial is defined only for nonnegative integers.)
*/
CREATE OR REPLACE PROCEDURE numbers(n number) IS
...
set serveroutput on
execute numbers(0);
execute numbers(-2);
execute numbers(40);
----------------------------------------------------------------
/* (exception)
Write a function which returns the sum of the numbers in its string parameter.
The numbers are separated with a '+'. If any expression between the '+' characters
is not a number, the function should consider this expression as 0.
*/
CREATE OR REPLACE FUNCTION sum_of2(p_char VARCHAR2) RETURN number IS
Test:
SELECT sum_of2('1+21 + bubu + y1 + 2 + -1 ++') FROM dual;

Hint: try to convert the expressions to number, and handle the exception
----------------------------------------------------------------

